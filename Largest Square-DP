'''
    // Brute Force//

    Time Complexity: O(Q * N * M * X)
    Space Complexity: O(1)
    where 'X' is the distance of the center cell from the nearest edge of the grid.
'''
def findLargestSquare(grid, queries, k):
    results = []
    n = len(grid)
    m = len(grid[0])

    for i in range(len(queries)):
        cntrY = queries[i][0]
        cntrX = queries[i][1]
        nearestEdgeDist = min(cntrY, n - cntrY - 1, cntrX, m - cntrX - 1)
        sideLength = 0
        for len1 in range(0,nearestEdgeDist+1):
            oneCount = 0
            for row in range(cntrY-len1, cntrY+len1+1):
                for col in range(cntrX-len1, cntrX+len1+1):
                    if (grid[row][col] == 1):
                        oneCount += 1
            if (oneCount > k):
                break
            elif(oneCount <= k):
                sideLength = 2 * len1 + 1
        results.append(sideLength)
    return results


''' 
    // Using Dynamic Programming and Binary Search//

    Time Complexity: O(N * M + Q * log X)
    Space Complexity: O(N * M),
    where'X' is the distance of the center cell from the nearest edge of the grid.

'''

def findLargestSquare(grid, queries, k):
    results = []
    n = len(grid)
    m = len(grid[0])
    dp = [[0 for i in range(m)] for j in range(n)]
    dp[0][0] = grid[0][0]

    for i in range(1,n):
        dp[i][0] = dp[i - 1][0] + grid[i][0]

    for j in range(1,m):
        dp[0][j] = dp[0][j - 1] + grid[0][j]

    for i in range(1,n):
        for j in range(1,m):
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + grid[i][j] - dp[i - 1][j - 1]

    for i in range(len(queries)):
        # Find the location of the centre cell for each query.
        cntrY = queries[i][0]
        cntrX = queries[i][1]
        # Calculate the distance of the center from the nearest edge of the grid.
        nearestEdgeDist = min(cntrY, n - cntrY - 1, cntrX, m - cntrX - 1)
        # Define a variable to store the length of the side of the largest possible square.
        sideLength = 0
        low = 0
        high = nearestEdgeDist
        # Apply binary search on the length of the possible square.
        while (low <= high):
            len1 = (low + high) // 2
            top = cntrY - len1
            bottom = cntrY + len1
            left = cntrX - len1
            right = cntrX + len1

            # Calculate the number of 1s in the current square.
            oneCount = dp[bottom][right]
            if (top > 0):
                oneCount -= dp[top - 1][right]
            if (left > 0):
                oneCount -= dp[bottom][left - 1]
            if (top > 0 and left > 0):
                oneCount += dp[top - 1][left - 1]
            # If the number of 1s is less than or equal to 'K', then update the maximum side length and increase the value of the lower limit.
            if (oneCount <= k) :
                sideLength = 2 * len1 + 1
                low = len1 + 1    
            # If the number of 1s is more than 'K', then decrease the value of the upper limit.
            elif (oneCount > k):
                high = len1 - 1
        results.append(sideLength)
    return results

