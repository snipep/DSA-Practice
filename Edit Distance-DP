# Dp using recusion + memoization
def f(i,j,s1,s2,dp):
    if i < 0:return j+1
    if j < 0:return i+1
    if dp[i][j] != -1:
        return dp[i][j]
    if s1[i] == s2[j]:
        return f(i-1, j-1, s1,s2, dp)
    dp[i][j] = 1 + min(f(i-1,j,s1,s2, dp) ,min(f(i,j-1,s1,s2,dp), f(i-1,j-1,s1,s2,dp)))
    return dp[i][j]
    
def editDistance(str1, str2) :
    n = len(str1)
    m = len(str2)
    dp = [[-1]*(m+1) for _ in range(n+1)]
    return f(n-1,m-1,str1,str2, dp)



# DP using tabulation without space optimisation
def editDistance(s1, s2) :
    n = len(s1)
    m = len(s2)
    dp = [[-1]*(m+1) for _ in range(n+1)]
    for i in range(n+1):
        dp[i][0] = i
    for j in range(m+1):
        dp[0][j] = j
    for i in range(1,n+1):
        for j in range(1,m+1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j] ,min(dp[i][j-1], dp[i-1][j-1]))
    return dp[n][m]


# DP using tabulation with space optimisation
def editDistance(s1, s2) :
    n = len(s1)
    m = len(s2)
    prev = [0]*(m+1)
    curr = [0]*(m+1)

    for j in range(m+1):
        prev[j] = j

    for i in range(1,n+1):
        curr[0] = i
        for j in range(1,m+1):
            if s1[i - 1] == s2[j - 1]:
                curr[j] = prev[j-1]
            else:
                curr[j] = 1 + min(prev[j] ,min(curr[j-1], prev[j-1]))
        prev = curr[:]

    return prev[m]


