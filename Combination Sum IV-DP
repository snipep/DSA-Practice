#DP using memoization and recursion
class Solution:
    def solve(self, nums, target, dp):
        if target == 0:
            return 1
        
        if dp[target] != -1:
            return dp[target]
        count = 0
        for num in nums:
            if num <= target:
                count += self.solve(nums, target - num, dp)
            
        dp[target] = count
        return count

    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [-1]*(target+1)
        return self.solve(nums, target, dp)

#Dp using tabulation
class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0]*(target+1)
        dp[0] = 1

        for i in range(1, target + 1):
            for num in nums:
                if i >= num:
                    dp[i] += dp[i-num]

        return dp[target]
