class Solution:
    def shortestPathBinaryMatrix(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        m = len(matrix[0])
        src = [0,0]
        dest = [n-1, m-1]
        if matrix[0][0] == 1:
            return -1
        if src == dest:
            return 1
            
        di = [-1, -1, -1, 0, 0, 1, 1, 1]
        dj = [1, 0, -1, -1, 1, 1, 0, -1]


        dist = [[float('inf')]*m for _ in range(n)]
        dist[src[0]][src[1]] = 0

        q = deque()
        q.append((0, src[0], src[1]))

        while q:
            dis, r, c = q.popleft()

            for k in range(8):
                i = r + di[k]
                j = c + dj[k]
                
                if 0 <= i < n and 0 <= j < m and dis + 1 < dist[i][j] and matrix[i][j] == 0:
                    dist[i][j] = dis + 1

                    q.append((dis + 1, i, j))

        if dist[dest[0]][dest[1]] != float('inf'):
            return dist[dest[0]][dest[1]] + 1
        else:
            return -1
