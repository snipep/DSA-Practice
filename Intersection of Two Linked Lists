# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None


T.C ==> O(N)
S.C ==> O(1)

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        temp1 = headA
        len1 = 0
        while temp1 is not None:
            len1 += 1 
            temp1 = temp1.next

        temp2 = headB
        len2 = 0
        while temp2 is not None:
            len2 += 1 
            temp2 = temp2.next
        
        if headA == headB:
            return headA

        diff = abs(len1-len2)
        startA,startB = headA,headB
        if len1 > len2:
            for _ in range(diff):
                startA = startA.next
        else:
            for _ in range(diff):
                startB = startB.next

        while(startA is not None or startB is not None):
            if startA == startB:
                return startA
            startA = startA.next
            startB = startB.next
