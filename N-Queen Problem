class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        ans = []
        board = ["."*n for _ in range(n)]
        leftrow = [0]*n
        upperdiagonal = [0]*(2*n-1)
        lowerdiagonal = [0]*(2*n-1)

        def solve(col,board,ans,leftrow,upperdiagonal,lowerdiagonal,n):
            if col == n :
                ans.append(board[:])
                return

            for row in range(n):
                if leftrow[row] == 0 and lowerdiagonal[row + col] == 0 and upperdiagonal[n-1 + col - row] == 0:
                    board[row] = board[row][:col] + "Q" + board[row][col+1 :]
                    leftrow[row] = 1
                    lowerdiagonal[row + col] = 1 
                    upperdiagonal[n-1 + col - row] = 1
                    solve(col+1,board,ans,leftrow,upperdiagonal,lowerdiagonal,n)
                    board[row] = board[row][:col] + "." + board[row][col+1 :]
                    leftrow[row] = 0
                    lowerdiagonal[row + col] = 0
                    upperdiagonal[n-1 + col - row] = 0

        solve(0,board,ans,leftrow,upperdiagonal,lowerdiagonal,n)
        ans.sort(reverse = True)
        return ans
