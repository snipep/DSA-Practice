def count_inversions(arr,n):
    return merge_sort(arr, 0, n - 1)

def merge_sort(arr, start, end):
    count = 0
    if start < end:
        mid = (start + end) // 2
        count += merge_sort(arr, start, mid)
        count += merge_sort(arr, mid + 1, end)
        count += merge(arr, start, mid, end)
    return count
    
def merge(arr, start, mid, end):
    count = 0
    left_arr = arr[start:mid + 1]
    right_arr = arr[mid + 1:end + 1]
    i = j = 0
    k = start
    while(i<len(left_arr) and j < len(right_arr)):
        if left_arr[i] <= right_arr[j]:
            arr[k] = left_arr[i]
            i+=1
        else:
            arr[k] = right_arr[j]
            j+=1
            count += len(left_arr) - i
        k+=1
        
    while(i<len(left_arr)):
        arr[k] = left_arr[i]
        i+=1
        k+=1
        
    while(j<len(right_arr)):
        arr[k] = right_arr[j]
        j+=1
        k+=1
    
    return count
    
arr=[5,3,2,4,1]
# arr=[4,3,1,2,5]
n=len(arr)
print(count_inversions(arr,n))
