#Longest common subsequence using DP tabulation without space optimisatiion
def lcs(a, b):
    len1 = len(a)
    len2 = len(b)
    dp = [[-1]*(len2+1) for _ in range(len1+1)]
    for i in range(len1+1):
        dp[i][0] = 0
    for j in range(len2):
        dp[0][j] = 0
    for ind1 in range(1,len1+1):
        for ind2 in range(1,len2+1):
            if a[ind1 - 1] == b[ind2 - 1]:
                dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1]
            else:
                dp[ind1][ind2] = max(dp[ind1][ind2-1],dp[ind1-1][ind2])
    return dp

#Tracing back in DP matrix to print the answere
def shortestSupersequence(a: str, b: str) -> str:
    len1 = len(a)
    len2 = len(b)
    dp = lcs(a,b)
    i,j = len1,len2
    ans = ''
    while(i > 0 and j > 0):
        if a[i-1] == b[j-1]:
            ans += a[i-1]
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            ans += a[i-1]
            i -= 1
        else:
            ans += b[j-1]
            j -= 1

    while i>0:
        ans += a[i-1]
        i -= 1
    while j>0:
        ans += b[j-1]
        j -= 1
    ans = ans[::-1]
    return ans
