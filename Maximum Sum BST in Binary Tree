# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        self.maxSum = 0

        def dfs(node):
            if not node:
                return float('inf'), float('-inf'), 0

            left_min, left_max, left_sum = dfs(node.left)
            right_min, right_max, right_sum = dfs(node.right)

            if left_max < node.val < right_min:
                curr_sum = left_sum + right_sum + node.val
                self.maxSum = max(self.maxSum, curr_sum)
                return min(left_min, node.val), max(node.val, right_max), curr_sum
            return float('-inf'), float('inf'), 0
        dfs(root)
        return self.maxSum
