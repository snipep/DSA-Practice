class Solution:
    # T.C == >> O(N * LogN)
    # S.C ==>> O(1)
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        low, high = 1, max(piles)
        while low <= high:
            k = low + (high - low)//2
            hours_need = 0

            for pile in piles:
                hours_need += (pile + k - 1) // k
            
            if hours_need <= h:
                high = k - 1
            else:
                low = k + 1
        return low

