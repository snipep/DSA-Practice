# Dp using recursion + Memoization
def f(i,j,t1,t2, dp):
    if i < 0 and j < 0:return True
    if i < 0 and j >= 0:return False
    if j < 0 and i >= 0:
        for k in range(i+1):
            if t1[k] != '*':
                return False
        return True
    if dp[i][j] != -1:
        return dp[i][j]
    if t1[i] == t2[j] or t1[i] == '?':
        dp[i][j] = f(i-1, j-1, t1,t2, dp)
        return dp[i][j]
    if t1[i] == '*':
        dp[i][j] = f(i-1,j, t1,t2, dp) or f(i,j-1, t1,t2, dp)
        return dp[i][j]
    else:
        dp[i][j] = False
        return dp[i][j]

def wildcardMatching(pattern, text):
    n = len(pattern)
    m = len(text)
    dp = [[-1]*(m+1) for i in range(n+1)]
    return f(n-1,m-1,pattern,text, dp)
    
    
# Dp using Tabulation without space optimisation
def wildcardMatching(S1, S2):
    n = len(S1)
    m = len(S2)
    dp = [[False]*(m+1) for i in range(n+1)]
    dp[0][0] = True
    for j in range(1, m+1):
        dp[0][j] = False

    for i in range(1,n+1):
        flag = True
        for k in range(1, i+1):
            if S1[k-1] != '*':
                flag = False
                break
        dp[i][0] = flag

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if S1[i - 1] == S2[j - 1] or S1[i - 1] == '?':
                dp[i][j] = dp[i - 1][j - 1]
            else:
                if S1[i - 1] == '*':
                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]
                else:
                    dp[i][j] = False

    return dp[n][m]


# DP using tabulation with space optimisation
def wildcardMatching(S1, S2):
    n = len(S1)
    m = len(S2)
    prev = [False] * (m + 1)
    curr = [False] * (m + 1)
    prev[0] = True

    for j in range(1, m + 1):
        prev[j] = False

    for i in range(1, n + 1):
        flag = True
        for k in range(1, i + 1):
            if S1[k - 1] != '*':
                flag = False
                break
        curr[0] = flag

        for j in range(1, m + 1):
            if S1[i - 1] == S2[j - 1] or S1[i - 1] == '?':
                curr[j] = prev[j - 1]
            else:
                if S1[i - 1] == '*':
                    curr[j] = prev[j] or curr[j - 1]
                else:
                    curr[j] = False
        prev = curr[:]
    return prev[m]

    
    
    
    
    
