# dp using recursion + memoization
def f(ind, buy, cap, prices,dp):
    if ind == len(prices) or cap == 0:
        return 0
    profit = 0
    if dp[ind][buy][cap] != -1:
        return dp[ind][buy][cap]
    if buy:
        dp[ind][buy][cap] = max(-prices[ind] + f(ind + 1, 0, cap, prices, dp), f(ind + 1, 1, cap, prices, dp))
        return dp[ind][buy][cap]
    dp[ind][buy][cap] = max(prices[ind] + f(ind + 1, 1, cap - 1, prices, dp), f(ind + 1, 0, cap, prices, dp))
    return dp[ind][buy][cap]

def maxProfit(prices, n):
    dp = [[[-1] * 3 for _ in range(2)] for _ in range(n)]
    return f(0, 1, 2, prices, dp)


# Dp using tabulation without space optimisation
def maxProfit(prices, n):
    dp = [[[0] * 3 for _ in range(2)] for _ in range(n+1)]
    for ind in range(n-1,-1,-1):
        for buy in range(2):
            for cap in range(1,3):
                if buy:
                    dp[ind][buy][cap] = max(-prices[ind] + dp[ind + 1][0][cap], dp[ind+1][1][cap])
                else:
                    dp[ind][buy][cap] = max(prices[ind] + dp[ind + 1][1][cap - 1], dp[ind + 1][0][cap])

    return dp[0][1][2]

# Dp using tabulation with space optimisation
def maxProfit(prices, n):
    after = [[0] * 3 for _ in range(2)]
    curr = [[0] * 3 for _ in range(2)]
    for ind in range(n-1,-1,-1):
        for buy in range(2):
            for cap in range(1,3):
                if buy:
                    curr[buy][cap] = max(-prices[ind] + after[0][cap], after[1][cap])
                else:
                    curr[buy][cap] = max(prices[ind] + after[1][cap - 1], after[0][cap])
        after = curr[:]

    return after[1][2]



