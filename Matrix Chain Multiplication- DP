
# DP using recursion + memoization
def f(i, j, arr, dp):
	if i == j:
		return 0
	if dp[i][j] != -1:
		return dp[i][j]
	mini = 1e9
	for k in range(i,j,+1):
		steps = arr[i-1] * arr[k] * arr[j] + f(i, k, arr, dp) + f(k+1, j, arr, dp)
		if steps < mini:
			mini = steps
	
	dp[i][j] = mini
	return dp[i][j]

def matrixMultiplication(arr, n):
	dp = [[-1]*n for i in range(n)]
	return f(1,n-1,arr, dp)


# DP using tabulation without space optimisation
def matrixMultiplication(arr, n):
	dp = [[None]*(n+1) for i in range(n+1)]
	for i in range(1,n+1):
		dp[i][i] = 0
	mini = 1e9
	for i in range(n-1, 0,-1):
		for j in range(i + 1, n):
			for k in range(i,j):
				steps = arr[i-1] * arr[k] * arr[j] + dp[i][k] + dp[k+1][j]
				if steps < mini:
					mini = steps
			
				dp[i][j] = mini

	return dp[1][n-1]

