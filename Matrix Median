
def getMedian(matrix):
    n = len(matrix)
    m = len(matrix[0])
    low = 0
    high = 1e+10
    middle = (n * m) // 2
    while low <= high:
        mid = (low + high) // 2
        count = 0
        for i in range(n):
            low1 = 0
            high1 = m - 1
            while low1 <= high1:
                mid1 = (low1 + high1) // 2
                if matrix[i][mid1] <= mid:
                    low1 = mid1 + 1
                else:
                    high1 = mid1 - 1
            count += low1
        if count <= middle:
            low = mid + 1
        else:
            high = mid - 1
    return int(low)




class Solution:
    def countnumber(self, row, mid):
        low, high = 0, len(row) - 1
        while low <= high:
            mid2 = (low + high) // 2
            if row[mid2] <= mid:
                low = mid2 + 1
            else:
                high = mid2 - 1
        return low
        
    def median(self, A, n, m):
        low, high = 0, int(1e9)
        while low <= high:
            mid = (low + high)//2
            count = 0
            for i in range(n):
                count += self.countnumber(A[i], mid)
            
            if count <= (m * n) //2:
                low = mid + 1
            else:
                high = mid - 1
        return low     
