import heapq
class MedianFinder:

    def __init__(self):
        self.maxheap = []
        self.minheap = []

    def addNum(self, num: int) -> None:
        if len(self.maxheap) == 0:
            heapq.heappush(self.maxheap, -num)
            return

        if num <= -self.maxheap[0]:
            heapq.heappush(self.maxheap, -num)
        else:
            heapq.heappush(self.minheap, num)

        if len(self.maxheap) - len(self.minheap) > 1:
            el = -heapq.heappop(self.maxheap)
            heapq.heappush(self.minheap, el)
        elif len(self.minheap) - len(self.maxheap) > 1:
            el = heapq.heappop(self.minheap)
            heapq.heappush(self.maxheap, -el)

    def findMedian(self) -> float:
        if len(self.maxheap) == len(self.minheap):
            return (-self.maxheap[0] + self.minheap[0]) / 2
        elif len(self.maxheap) > len(self.minheap):
            return -self.maxheap[0]
        else:
            return self.minheap[0]
