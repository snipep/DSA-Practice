# DP using recursion + memoization
def fill(ind, wt, val, bag, dp):
    if ind == 0:
        if wt[ind] <= bag:
            return val[ind]
        else:
            return 0
    if dp[ind][bag] != -1:
        return dp[ind][bag]

    nottake = fill(ind-1, wt,val,bag, dp)
    take = float('-inf')
    if wt[ind] <= bag:
        take = val[ind] + fill(ind-1, wt, val, bag - wt[ind], dp)
    dp[ind][bag] = max(take, nottake)
    return dp[ind][bag]

def knapsack(n, wt, val, bag):
    dp = [[-1]*(bag + 1) for _ in range(n+1)]
    return fill(n-1, wt, val, bag, dp)

# DP using Tabulation without space optimisation
def knapsack(n, wt, val, bag):
    dp = [[0]*(bag + 1) for _ in range(n)]

    for i in range(wt[0],bag+1):
        dp[0][i] = val[0]
    
    for ind in range(1, n):
        for W in range(1, bag+1):
            nottake = dp[ind - 1][W]
            take = 0
            if wt[ind] <= W:
                take = val[ind] + dp[ind - 1][W - wt[ind]]
            dp[ind][W] = max(take, nottake)
    return dp[n-1][bag]

# DP using Tabulation with space optimisation
def knapsack(n, wt, val, bag):
    prev = [0]*(bag+1)
    curr = [0]*(bag+1)
    for i in range(wt[0],bag+1):
        prev[i] = val[0]
    for ind in range(1, n):
        for W in range(1, bag+1):
            nottake = prev[W]
            take = 0
            if wt[ind] <= W:
                take = val[ind] + prev[W - wt[ind]]
            curr[W] = max(take, nottake)
        prev = curr[:]
    return prev[bag]
      
# Main.
t = int(input())
while (t > 0):
    n = int(input())
    wt = list(map(int, input().strip().split()))
    val = list(map(int, input().strip().split()))
    bag = int(input())
    print(knapsack(n, wt, val, bag))
    t -= 1
