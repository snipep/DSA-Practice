from collections import deque
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':
        if root is None:
            return None
        q = deque()
        q.append(root)
        while q:
            size = len(q)
            level_node = deque()
            for _ in range(size):
                node = q.popleft()
                level_node.append(node)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            for i in range(1,len(level_node)):
                if level_node[i] in level_node:  
                    level_node[i-1].next = level_node[i] 
                else:
                    level_node[i].next = None
        return root
