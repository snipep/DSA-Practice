# T.C ==>> O(Log(min(m,n)))
def ninjaAndLadoos(row1, row2, m, n, k):
    # to reduce the complexcity as it will do binary search on the smaller array
    if m > n:
        return ninjaAndLadoos(row2,row1,n,m,k)
        
    low = max(0, k-m)
    high = min(k, n)
    while low <= high:
        cut1 = (low + high) // 2 
        cut2 = k - cut1 
        # used to cover up the edge cases 
        #Making L1,L2 Int_Min & R1,R2 Int_Max
        l1 = float('-inf') if cut1 == 0 else row1[cut1 - 1]
        l2 = float('-inf') if cut2 == 0 else row2[cut2 - 1]
        r1 = float('inf') if cut1 == m else row1[cut1]
        r2 = float('inf') if cut2 == n else row2[cut2]

        if l1 <= r2 and l2 <= r1:
            return max(l1,l2)
        elif l1 > r2:
            high = cut1 -1
        else:
            low = cut1 + 1
            
    return None
