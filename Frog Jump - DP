from typing import List

def f(n: int, heights: List[int], dp) -> int:
    if n == 0:
        return 0
#check if that recursion have already being done or not
    if dp[n] != 0:
        return dp[n]
    left = f(n-1, heights,dp) + abs(heights[n] - heights[n-1])
    right = float('inf')
    
    if n > 1 :
        right = f(n-2, heights,dp) + abs(heights[n] - heights[n-2])
#Store the result of the recursion in the the dp array
    dp[n] = min(left, right)
    return dp[n]

def frogJump(n: int, heights: List[int]) -> int:
#initialise the dp array to store and reduce the overlapping problem
    dp = [0]*(n+1)
    return f(n-1,heights, dp)
