class Solution:
    # DP using recursion + memoization
    def f(self, i, j, s, t, dp):
        if j < 0:return 1
        if i < 0:return 0
        if dp[i][j] != -1:return dp[i][j]

        if s[i] == t[j]:
            dp[i][j] = self.f(i - 1, j -1, s, t, dp) + self.f(i - 1, j, s, t, dp)
            return dp[i][j]
        dp[i][j] = self.f(i - 1, j, s, t, dp)
        return dp[i][j]

    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)
        dp = [[-1]*(m+1) for _ in range(n+1)]
        return self.f(n-1, m-1, s, t, dp)

# DP using tabulation without space optimisation
    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)
        dp = [[0]*(m+1) for _ in range(n+1)]
        for j in range(m+1):
            dp[0][j] = 0
        for i in range(n+1):
            dp[i][0] = 1
        
        for i in range(1,n+1):
            for j in range(1,m+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
                else:
                    dp[i][j] =dp[i-1][j]
        return dp[n][m]



# DP using tabulation with space optimisation using 2 arrays of space
    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)
        prev = [0]*(m+1)
        curr = [0]*(m+1)
        prev[0] = curr[0] = 1

        for i in range(1,n+1):
            for j in range(1,m+1):
                if s[i-1] == t[j-1]:
                    curr[j] = prev[j-1] + prev[j]
                else:
                    curr[j] = prev[j]
            prev = curr[:]

        return prev[m]



# DP using tabulation with space optimisation using single 1 array of space
    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)
        prev = [0] * (m + 1)
        prev[0] = 1

        for i in range(1, n + 1):
            for j in range(m, 0, -1):
                if s[i - 1] == t[j - 1]:
                    prev[j] = prev[j - 1] + prev[j]
        
        return prev[m]

