class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []

        ds = {"2": "abc", 
              "3": "def",
              "4": "ghi",
              "5": "jkl", 
              "6": "mno", 
              "7": "pqrs", 
              "8": "tuv", 
              "9": "wxyz"}
        ans = [""]

        for digit in digits:
            letters = ds[digit]

            new_ans = []
            for combo in ans:
                for letter in letters:
                    new_ans.append(combo + letter)
            
            ans = new_ans
        
        return ans


class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        
        digit_to_letters = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        
        def backtrack(path, index):
            if index == len(digits):
                combinations.append(''.join(path))
                return
            letters = digit_to_letters[digits[index]]
            for letter in letters:
                path.append(letter)
                backtrack(path, index + 1)
                path.pop()
        
        combinations = []
        backtrack([], 0)
        return combinations
