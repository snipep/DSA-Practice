T.C ==>> (N*N) === O(N^2) [for iteration of a]*[for Binary search]
S.C ==>> O(M)[space used to return the answere]
auxiliary Space ==>> O(1)
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        n = len(nums)
        a = 0
        res = []
        for a in range(n-2):
            if a > 0 and nums[a] == nums[a - 1]:
                continue
            left = a+1
            right = n-1
            while left < right:    
                if nums[left] + nums[right] == -nums[a]:
                    res.append([nums[a], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif nums[left] + nums[right] < -nums[a]:
                    left += 1
                else:
                    right -= 1

        return res
