# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

T.C ==>> ON) 
S.C ==>> O(N)

from collections import deque
class Codec:
    def serialize(self, root):
        if not root:
            return ""
        queue = deque()
        queue.append(root)
        ans = []
        while queue:
            node = queue.popleft()
            if node:
                ans.append(str(node.val))
                queue.append(node.left)
                queue.append(node.right)
            else:
                ans.append("#")
        return ",".join(ans)

    def deserialize(self, data):
        if len(data) == 0:
            return None
        values = data.split(",")
        root_val = values.pop(0)
        if root_val == "#":
            return None
        root = TreeNode(int(root_val))
        q = deque()
        q.append(root)
        while q and values:
            node = q.popleft()
            left_val = values.pop(0)
            if left_val == "#":
                pass
            if left_val != "#":
                left_node = TreeNode(int(left_val))
                node.left = left_node
                q.append(left_node)
            if values:
                right_val = values.pop(0)
                if right_val == "#":
                    pass
                if right_val != "#":
                    right_node = TreeNode(int(right_val))
                    node.right = right_node
                    q.append(right_node)
        print(root)
        return root

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
