from collections import OrderedDict

class LFUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        self.freq = OrderedDict()

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        self.freq[key] += 1
        self.freq.move_to_end(key)
        return self.cache[key]

    def put(self, key: int, value: int) -> None:
        if self.capacity == 0:
            return
        if key in self.cache:
            self.cache[key] = value
            self.freq[key] += 1
            self.freq.move_to_end(key)
            
        else:
            if len(self.cache) >= self.capacity:
                least_frequent_key = min(self.freq, key=self.freq.get)
                self.cache.pop(least_frequent_key)
                self.freq.pop(least_frequent_key)
            self.cache[key] = value
            self.freq[key] = 1

# Your LFUCache object will be instantiated and called as such:
# obj = LFUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
