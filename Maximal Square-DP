# S.C ==>> O(N*M)
# T.C ==>> O(N*M)
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        rows, cols = len(matrix), len(matrix[0])
        dp = {}

        def solve(r, c):
            if r >= rows or c >= cols:
                return 0

            if (r,c) not in dp:
                down = solve(r+1, c)
                right = solve(r, c+1)
                diag = solve(r+1, c+1)

                dp[(r,c)] = 0
                if matrix[r][c] == "1":
                    dp[(r,c)] = 1 + min(down, right, diag)

            return dp[(r,c)]
        
        solve(0, 0)
        return max(dp.values())**2


class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        
        dp = [[0] * n for _ in range(m)]
        
        max_size = 0
        
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == '1':
                    if i == 0 or j == 0:
                        dp[i][j] = 1
                    else:
                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                    
                    max_size = max(max_size, dp[i][j])
        
        return max_size * max_size
