class Solution:
    def solve(self, pos, nums, dp):
        if pos == len(nums) - 1:
            return 0  
        if nums[pos] == 0:
            return float('inf') 
            
        if dp[pos] != float('inf'):
            return dp[pos]
        min_jump = float('inf')
        max_jump = min(pos + nums[pos], len(nums) - 1)
        for next_pos in range(pos + 1, max_jump + 1):
            dp[pos] = min(min_jump, 1 + self.solve(next_pos, nums, dp))
        
        return dp[pos]

    def jump(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [float('inf')] * n
        dp[0] = 0
        for i in range(n):
            for j in range(1, nums[i] + 1):
                if i + j < n:
                    dp[i + j] = min(dp[i] + 1, dp[i + j])

        return dp[-1]
        # return self.solve(0, nums, dp)
