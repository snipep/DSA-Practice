
class Solution:
# DP using recursion + memoization
    def lis(self, arr, start, dp, N):
        if dp[start] != -1:
            return dp[start]

        ret = 0
        for nxt in range(start+1, N, +1):
            if arr[start] < arr[nxt]:
                ret = max(ret, self.lis(arr, nxt, dp, N) + 1)
        dp[start] = ret
        return dp[start]

    def lengthOfLIS(self, nums: List[int]) -> int:
        nums = [float("-inf")] + nums
        n = len(nums)
        dp = [-1] * n
        return self.lis(nums, 0, dp, n)


# DP using tabulation without space optimisation
    def lengthOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [[0]*(n+1) for i in range(n+1)]

        for ind in range(n-1,-1,-1):
            for prev_ind in range(ind-1,-2,-1):
                len1 = dp[ind + 1][prev_ind + 1]
                if prev_ind == -1 or nums[ind] > nums[prev_ind]:
                    len1 = max(len1, dp[ind + 1][ind + 1])
                
                dp[ind][prev_ind + 1] = len1

        return dp[0][-1+1]

# DP using tabulation with space optimisation
    def lengthOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        after = [0]*(n+1)
        curr = [0]*(n+1)

        for ind in range(n-1,-1,-1):
            for prev_ind in range(ind-1,-2,-1):
                len1 = after[prev_ind + 1]
                if (prev_ind == -1 or nums[ind] > nums[prev_ind]):
                    len1 = max(len1, after[ind + 1])
                
                curr[prev_ind + 1] = len1
            after = curr[:]
        return after[0]
