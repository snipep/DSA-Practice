T.C ==>> O(2^t * k)
S.C ==>> O(k * n)

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        ds = []
        n = len(candidates)
        def finalcombination(ind,target):
            if ind == n:
                if target == 0:
                    ans.append(ds[:])
                return
            if candidates[ind] <= target:
                ds.append(candidates[ind])
                # element is picked
                finalcombination(ind, target - candidates[ind])
                ds.pop()
            # element is not picked
            finalcombination(ind + 1, target)
        finalcombination(0, target)
        return ans
