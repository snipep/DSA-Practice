
# DP using recursion + memoization
def f(i, j, a, dp):
    if i > j:
        return 0
    if dp[i][j] != -1:
        return dp[i][j]
        
    maxi = float('-inf')
    for ind in range(i, j + 1):
        cost = a[i - 1] * a[ind] * a[j + 1] + f(i, ind - 1, a, dp) + f(ind + 1, j, a, dp)
        maxi = max(maxi, cost)
    dp[i][j] = maxi
    return dp[i][j]


def maxCoins(a: List[int]) -> int:
    n = len(a)
    a.insert(0,1)
    a.append(1)
    dp = [[-1] *(n+1) for i in range(n+1)]
    return f(1,n,a, dp)


# DP using Tabulation without space optimisation
def maxCoins(a: List[int]) -> int:
    n = len(a)
    a.insert(0,1)
    a.append(1)
    dp = [[0] *(n+2) for i in range(n+2)]

    for i in range(n,0,-1):
        for j in range(1,n+1):
            if i>j:continue
            maxi = float('-inf')
            for ind in range(i, j + 1):
                cost = a[i - 1] * a[ind] * a[j + 1] + dp[i][ind-1] + dp[ind+1][j]
                maxi = max(maxi, cost)
            dp[i][j] = maxi
    return dp[1][n]









