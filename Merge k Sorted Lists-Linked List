# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

#T.C ==>> O(N*LogK)
#S.C ==>> O(1)
class Solution:
    def merge(self, left, right):
        dummy = ListNode(-1)
        temp = dummy
        while left and right:
            if left.val < right.val:
                temp.next = left
                temp = temp.next
                left = left.next
            else:
                temp.next = right
                temp = temp.next
                right= right.next
        while left:
            temp.next = left
            temp = temp.next
            left = left.next

        while right:
            temp.next = right
            temp = temp.next
            right= right.next

        return dummy.next

    def mergeSort(self, lists, start, end):
        if start == end:
            return lists[start]
        mid = start + (end - start)//2
        left = self.mergeSort(lists, start, mid)
        right = self.mergeSort(lists, mid + 1, end)
        return self.merge(left, right)


    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists:
            return None
        return self.mergeSort(lists, 0, len(lists) - 1)
