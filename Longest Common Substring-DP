#DP using tbabulation + space optimisation
# T.C ==>> O(N*M)
# S.C ==>> O(N*M)
def lcs(str1: str, str2: str) -> int:
    n, m = len(str1), len(str2)
    dp = [[-1]*(m + 1) for i in range((n+1))]
    prev, curr = [0]*(m+1), [0]*(m+1)
    ans = 0
    
    for i in range(1,n+1):
        for j in range(1,m+1):
            if str1[i-1] == str2[j-1]:
                curr[j] = 1 + prev[j-1]
                ans = max(ans, curr[j])
            else:
                curr[j] = 0
        prev = curr[:]
    return ans

#Brute force approach
# T.C ==>> O(N^3)
# S.C ==>> O(1)
def lcs(str1: str, str2: str) -> int:
    ans = 0
    for i in range(len(str1)):
        for j in range(len(str2)):
            k = 0
            while ((i + k) < len(str1) and (j + k) < len(str2) and str1[i + k] == str2[j + k]):
                k = k + 1
            ans = max(ans, k)
    
    return ans
